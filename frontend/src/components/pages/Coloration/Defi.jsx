import { rgbToHex } from '../../../utils/colorUtils';
import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';

import {ValidationPopup} from '../../common/ValidationPopup';
import {RulesPopup} from '../../common/RulesPopup';
import GraphDisplay from './GraphDisplay';
import config from '../../../config';
import { TimerDisplay } from '../../common/TimerDisplay';

import '../../../styles/pages/Coloration/GlobalMode.css';

const Defi = () => {
    const [graphs, setGraphs] = useState({
        tresFacile: [],
        facile: [],
        moyen: [],
        difficile: [],
        extreme: []
    });
    const [selectedGraph, setSelectedGraph] = useState('');
    const [currentGraph, setCurrentGraph] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [validationPopup, setValidationPopup] = useState(null);
    const [isImpossibleEnabled, setIsImpossibleEnabled] = useState(false);
    const cyRef = useRef(null);
    const { time, start, stop, reset, formatTime, isRunning } = useTimer();
    const [showRules, setShowRules] = useState(false);
    const navigate = useNavigate();

    useEffect(() => {
        fetchGraphs();
    }, []);

    useEffect(() => {
        if (cyRef.current) {
            cyRef.current.on('style', checkColoredPercentage);
            return () => {
                cyRef.current.off('style', checkColoredPercentage);
            };
        }
    }, [cyRef.current]);

    useEffect(() => {
        if (showRules) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }
        return () => {
            document.body.style.overflow = '';
        };
    }, [showRules]);

    const difficultyLabels = {
        tresFacile: 'Tr√®s Facile',
        facile: 'Facile',
        moyen: 'Moyen',
        difficile: 'Difficile',
        extreme: 'Extr√™me'
    };

    return (
        <div className="mode-container">
            <button className="mode-back-btn" onClick={() => navigate('/coloration')}>&larr; Retour</button>
            <h2 className="mode-title">Mode D√©fi</h2>
            <div className="mode-top-bar">
                <select
                    className="mode-select"
                    value={selectedGraph}
                    onChange={handleGraphSelect}
                    disabled={loading}
                >
                    <option value="" disabled hidden>
                        {loading ? "Chargement des graphes..." : "Choisis un graphe"}
                    </option>
                    {Object.entries(graphs).map(([difficulty, graphList]) => (
                        graphList.length > 0 && (
                            <optgroup key={difficulty} label={difficultyLabels[difficulty]}>
                                {graphList.map((graph) => (
                                    <option key={graph._id} value={graph._id}>
                                        {graph.name}
                                    </option>
                                ))}
                            </optgroup>
                        )
                    ))}
                </select>
                {error && <div className="error-message">{error}</div>}
                {currentGraph && <TimerDisplay time={time} formatTime={formatTime} />}
            </div>
            {currentGraph && <div className="mode-buttons-row">
                <button className="mode-btn mode-btn-validate" onClick={validateGraph}>Valider la coloration</button>
                <button className="mode-btn mode-btn-reset" onClick={resetColors}>R√©initialiser la coloration</button>
                <button
                    className="mode-btn mode-btn-impossible"
                    onClick={handleImpossible}
                    disabled={!isImpossibleEnabled}
                >
                    Je pense qu'il est impossible
                </button>
            </div>}

            {currentGraph && <GraphDisplay graphData={currentGraph} cyRef={cyRef} />}

            <button className="mode-rules-btn" onClick={() => setShowRules(true)}>&#9432; Voir les r√®gles</button>

            {validationPopup && (
                <ValidationPopup
                    type={validationPopup.type}
                    title={validationPopup.title}
                    message={validationPopup.message}
                    onClose={handleClosePopup}
                />
            )}

            {showRules && (
                <RulesPopup title="R√®gles du mode D√©fi" onClose={() => setShowRules(false)}>
                    <h3>üéØ Objectif</h3>
                    <ul>
                        <li>Deux sommets adjacents ne doivent jamais avoir la m√™me couleur.</li>
                        <li>Tu disposes d'un nombre limit√© de pastilles que tu dois placer correctement.</li>
                    </ul>

                    <h3>üõ†Ô∏è Comment jouer √† la <strong>Coloration d'un Graphe</strong></h3>
                    <ul>
                        <li>Choisis un graphe pr√©d√©fini dans le menu d√©roulant.</li>
                        <li>Attrape une pastille de couleur, fais-la glisser vers un sommet et rel√¢che-la pour lui attribuer cette couleur.</li>
                        <li>Colorie enti√®rement le graphe en respectant les r√®gles de coloration.</li>
                        <li>Quand tu penses avoir r√©ussi, clique sur le bouton <strong>Valider la Coloration</strong> pour v√©rifier si le graphe est correctement color√©.</li>
                    </ul>

                    <h3>üîß Fonctionnalit√©s</h3>
                    <ul>
                        <li>Si tu penses avoir fait une erreur, tu peux faire un clic droit sur un sommet pour lui retirer sa couleur.</li>
                        <li>Si tu veux recommencer, clique sur <strong>R√©initialiser la Coloration</strong> pour remettre tous les sommets dans leur √©tat initial.</li>
                    </ul>
                </RulesPopup>
            )}
        </div>
    );

    function fetchGraphs() {
        const fetchData = async () => {
            try {
                const response = await fetch(`${config.apiUrl}/graph`);
                if (!response.ok) {
                    throw new Error('Impossible de r√©cup√©rer la liste des graphes');
                }
                const data = await response.json();

                const sortedGraphs = {
                    tresFacile: [],
                    facile: [],
                    moyen: [],
                    difficile: [],
                    extreme: []
                };

                data.forEach(graph => {
                    switch (graph.difficulty) {
                        case 'Tr√®s facile':
                            sortedGraphs.tresFacile.push(graph);
                            break;
                        case 'Facile':
                            sortedGraphs.facile.push(graph);
                            break;
                        case 'Moyen':
                            sortedGraphs.moyen.push(graph);
                            break;
                        case 'Difficile':
                            sortedGraphs.difficile.push(graph);
                            break;
                        case 'Extr√™me':
                            sortedGraphs.extreme.push(graph);
                            break;
                        case 'Impossible-preuve-facile':
                            sortedGraphs.moyen.push(graph);
                            break;
                        case 'Impossible-preuve-difficile':
                            sortedGraphs.extreme.push(graph);
                            break;
                        default:
                            sortedGraphs.facile.push(graph);
                    }
                });

                setGraphs(sortedGraphs);
                setLoading(false);
            } catch (err) {
                setError('Impossible de r√©cup√©rer la liste des graphes');
                setLoading(false);
            }
        };

        fetchData();
    }

    function handleGraphSelect(event) {
        const graphId = event.target.value;
        setSelectedGraph(graphId);
        setIsImpossibleEnabled(false);

        if (!graphId) {
            setCurrentGraph(null);
            reset();
            return;
        }

        const fetchGraph = async () => {
            try {
                const response = await fetch(`${config.apiUrl}/graph/${graphId}`);
                if (!response.ok) {
                    throw new Error('Impossible de r√©cup√©rer les d√©tails du graphe');
                }
                const graphConfig = await response.json();

                if (graphConfig?.data) {
                    graphConfig.data.nodes.forEach(node => {
                        if (node.position) {
                            node.position.y += 80;
                        }
                    });

                    graphConfig.data.edges.forEach(edge => {
                        if (edge.data) {
                            edge.data.controlPointDistance = edge.data.controlPointDistance ?? 0;
                        }
                    });

                    setCurrentGraph({
                        name: graphConfig.name,
                        data: graphConfig.data,
                        optimalColoring: graphConfig.optimalColoring,
                        pastilleCounts: graphConfig.pastilleCounts,
                        difficulty: graphConfig.difficulty
                    });
                    reset();
                    start();
                } else {
                    throw new Error('Donn√©es invalides pour le graphe');
                }
            } catch (err) {
                console.error('Erreur lors du chargement du graphe:', err);
                setError('Impossible de charger le graphe s√©lectionn√©');
                setCurrentGraph(null);
            }
        };

        fetchGraph();
    }

    function checkColoredPercentage() {
        if (!cyRef.current) return;

        const totalNodes = cyRef.current.nodes().filter(node => !node.data('isColorNode')).length;
        const coloredNodes = cyRef.current.nodes().filter(node => {
            return !node.data('isColorNode') && rgbToHex(node.style('background-color')) !== '#CCCCCC';
        }).length;

        const percentage = (coloredNodes / totalNodes) * 100;
        setIsImpossibleEnabled(percentage >= 15);
    }

    function validateGraph() {
        if (!cyRef.current) return;

        const defaultColor = '#CCCCCC';
        let isCompleted = true;
        let isValid = true;

        cyRef.current.nodes().forEach((node) => {
            const nodeColor = node.style('background-color');
            let hexNodeColor = '';

            if (nodeColor.startsWith('rgb')) {
                hexNodeColor = rgbToHex(nodeColor);
            }

            if (hexNodeColor === defaultColor) isCompleted = false;

            node.connectedEdges().forEach((edge) => {
                const neighbor = edge.source().id() === node.id() ? edge.target() : edge.source();
                if (neighbor.style('background-color') === nodeColor) {
                    isValid = false;
                }
            });
        });

        if (!isCompleted) {
            setValidationPopup({
                type: 'warning',
                title: 'Attention !',
                message: "Le graphe n'est pas enti√®rement color√©."
            });
        } else if (!isValid) {
            setValidationPopup({
                type: 'error',
                title: 'Erreur !',
                message: "Deux sommets adjacents ont la m√™me couleur."
            });
        } else {
            stop();
            setValidationPopup({
                type: 'success',
                title: 'F√©licitations !',
                message: `Bravo ! La coloration est valide ! \n Temps: ${formatTime(time)}`
            });
        }
    }

    function resetColors() {
        if (!cyRef.current) return;

        const colorCounts = {};
        const unusedColors = {};
        const defaultColor = '#CCCCCC';

        cyRef.current.nodes().forEach((node) => {
            if (!node.data('isColorNode')) {
                const currentColor = rgbToHex(node.style('background-color'));
                if (currentColor !== defaultColor) {
                    colorCounts[currentColor] = (colorCounts[currentColor] || 0) + 1;
                }
                node.style('background-color', defaultColor);
            } else {
                const color = rgbToHex(node.style('background-color'));
                unusedColors[color] = (unusedColors[color] || 0) + 1;
            }
        });

        cyRef.current.nodes().filter(node => node.data('isColorNode')).forEach(node => cyRef.current.remove(node));

        let currentXPosition = 50;

        const allColors = { ...colorCounts };

        Object.entries(unusedColors).forEach(([color, count]) => {
            allColors[color] = (allColors[color] || 0) + count;
        });

        Object.entries(allColors).forEach(([color, count]) => {
            for (let i = 0; i < count; i++) {
                cyRef.current.add({
                    group: 'nodes',
                    data: { id: `color-${color}-${Date.now()}-${Math.random().toString(36).slice(2, 5)}`, isColorNode: true },
                    position: { x: currentXPosition, y: 50 },
                    style: {
                        'background-color': color,
                        'width': 30,
                        'height': 30,
                        'label': '',
                        'border-width': 2,
                        'border-color': '#000',
                        'shape': 'ellipse',
                    },
                    locked: false,
                });
                currentXPosition += 50;
            }
        });

        if (!isRunning) {
            reset();
            start();
        }
    }

    function handleImpossible() {
        if (!cyRef.current || !currentGraph) return;

        const totalNodes = cyRef.current.nodes().filter(node => !node.data('isColorNode')).length;
        const coloredNodes = cyRef.current.nodes().filter(node => {
            return !node.data('isColorNode') && rgbToHex(node.style('background-color')) !== '#CCCCCC';
        }).length;

        const percentage = (coloredNodes / totalNodes) * 100;

        if (percentage < 15) {
            setValidationPopup({
                type: 'warning',
                title: 'Attention !',
                message: "Tu dois essayer de colorer au moins 15% du graphe avant de d√©clarer qu'il est impossible !"
            });
            return;
        }

        const difficulty = currentGraph.difficulty.toLowerCase();
        const graphName = currentGraph.name;
        const gameNumber = parseInt(graphName.split(' ')[1]);

        if (difficulty.includes('impossible-preuve')) {
            let explanation = "";

            switch (gameNumber) {
                case 12:
                    explanation = "Pour ce graphe, nous avons deux couleurs √† disposition (rouge et bleu). Mais, on ne peut pas colorer ce graphe avec deux couleurs. En effet, ce graphe poss√®de deux cycles impairs (i.e. avec un nombre impair de sommets) : celui form√© par les sommets en vert clair, et celui form√© par les sommets en jaune dans la figure ci-contre. En effet, sur un cycle impair, il est impossible de faire alterner deux couleurs.";
                    break;
                case 13:
                    explanation = "Observons que les trois sommets d'un triangle doivent √™tre de couleurs diff√©rentes. Ainsi chacune des trois couleurs appara√Æt sur chaque triangle. Supposons que ce soit possible de colorer avec les jetons fournis. abc, efh et ihk sont des triangles. Comme on ne dispose que de deux jetons jaunes, l'un d'entre eux doit forc√©ment √™tre sur h, le seul sommet qui soit dans deux de ces triangles. De m√™me, abc et bcf sont des triangles, donc le deuxi√®me jeton jaune doit √™tre sur b, le sommet commun √† ces deux triangles. Une fois plac√©s les deux jetons jaunes, il ne reste que deux couleurs. On peut bien colorer le graphe restant avec deux couleurs. Cependant une telle coloration est fix√©e √† permutation des couleurs pr√®s. En effet, une fois que la couleur d'un sommet est fix√©e, celle de ses voisins doit √™tre diff√©rente, celles des voisins de ses voisins la m√™me et ainsi de suite. Ainsi une coloration en deux couleurs de ce graphe a forc√©ment 5 sommets d'une couleur (ceux en gris dans la figure ci-dessus) et 8 de l'autre (ceux en blanc). Or ici nous disposons de 6 jetons rouges et 7 jetons bleus.";
                    break;
                case 16:
                    explanation = "Pour ce graphe, nous avons un seul jeton de couleur jaune. Celui-ci doit forc√©ment √™tre au sommet central qui est reli√© √† tous les autres. Il reste ensuite les deux couleurs, rouge et bleu, pour colorer le cycle externe. Mais, cela est impossible car ce cycle est impair (il a 9 sommets), et qu'on ne peut donc pas faire alterner deux couleurs sur ce cycle.";
                    break;
                case 22:
                    explanation = "Ce graphe poss√®de 4 triangles disjoints repr√©sent√©s en vert sur la figure ci-contre. Comme on ne dispose que de trois couleurs de jetons, chacun de ces triangles doit avoir un sommet de chaque couleur. Il faudrait donc au moins quatre jetons de chaque couleur pour avoir une solution, mais nous ne disposons que de trois jetons bleus.";
                    break;
                case 25:
                    explanation = "Dans ce probl√®me, nous disposons de 6 jetons rouges. Il faut pouvoir placer ces jetons sur un ensemble ind√©pendant du graphe, c'est-√†-dire un ensemble dont aucune paire n'est reli√©e par une ar√™te. Montrons que ceci est impossible. On peut tout d'abord facilement voir qu'aucun des deux sommets en gris sur la figure ci-contre ne peut √™tre dans un tel ensemble ind√©pendant car ils ont trop de voisins. Les sommets non-gris forment un encha√Ænement de dix sommets sur lesquels il est impossible de mettre 6 jetons rouges. En effet, deux sommets cons√©cutifs ne peuvent pas √™tre rouge, donc on peut placer les jetons rouges au mieux un sommet sur deux, soit 5 fois.";
                    break;
                case 38:
                    explanation = "Pour ce graphe, nous avons deux couleurs √† disposition (rouge et bleu). On peut bien colorer ce graphe avec deux couleurs (voir la solution au probl√®me 37). Cependant une telle coloration est fix√©e √† permutation des couleurs pr√®s. En effet, une fois que la couleur d'un sommet est fix√©e, celle de ses voisins doit √™tre diff√©rente, celles des voisins de ses voisins la m√™me et ainsi de suite. Ainsi une coloration en deux couleurs de ce graphe a forc√©ment 6 sommets d'une couleur et 4 de l'autre. Or ici nous disposons de 5 jetons de chaque couleur.";
                    break;
                case 39:
                    explanation = "Pour ce graphe, nous avons deux couleurs √† disposition (rouge et bleu). Mais, on ne peut pas colorer ce graphe avec deux couleurs. En effet, ce graphe poss√®de des cycles impairs (i.e. avec un nombre impair de sommets). Par exemple, celui form√© par les sommets en vert clair dans la figure ci-contre. En effet, sur un cycle impair, il est impossible de faire alterner deux couleurs.";
                    break;
                default:
                    explanation = difficulty === "impossible-preuve-facile"
                        ? "En essayant le graphe, vous venez de comprendre pourquoi il est dans la cat√©gorie moyenne."
                        : "En essayant le graphe, vous venez de comprendre pourquoi il est dans la cat√©gorie extr√™me.";
            }

            stop();
            setValidationPopup({
                type: 'success',
                title: 'Bonne analyse !',
                message: `${explanation} \n Temps: ${formatTime(time)}`
            });
        } else {
            setValidationPopup({
                type: 'error',
                title: "Non, ce graphe n'est pas impossible.",
                message: "Ce graphe peut √™tre color√© correctement. Essaie encore !"
            });
        }
    }

    function handleClosePopup() {
        setValidationPopup(null);
    }
};

const useTimer = () => {
    const [time, setTime] = useState(0);
    const [isRunning, setIsRunning] = useState(false);
    const timerRef = useRef(null);

    useEffect(() => {
        if (isRunning) {
            timerRef.current = setInterval(() => {
                setTime(prevTime => prevTime + 1);
            }, 1000);
        } else {
            clearInterval(timerRef.current);
        }

        return () => clearInterval(timerRef.current);
    }, [isRunning]);

    const start = () => {
        setIsRunning(true);
    };

    const stop = () => {
        setIsRunning(false);
    };

    const reset = () => {
        setTime(0);
        setIsRunning(false);
    };

    const formatTime = (seconds) => {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    };

    return { time, isRunning, start, stop, reset, formatTime };
};

export default Defi; 